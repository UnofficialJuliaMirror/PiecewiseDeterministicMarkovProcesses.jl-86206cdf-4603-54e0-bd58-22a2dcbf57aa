{
    "docs": [
        {
            "location": "/", 
            "text": "PDMP.jl\n\n\nPDMP.jl is a Julia package that allows simulation of \nPiecewise Deterministic Markov Processes\n (PDMP); these encompass hybrid systems and jump processes, comprised of continuous and discrete components, as well as processes with time-varying rates. The aim of the package is to provide methods for the simulation of these processes that are \"exact\" up to the ODE integrator.\n\n\nWe provide several methods for the simulation:\n\n\n\n\na recent trick, called \nCHV\n, explained in \npaper-2015\n which allows to implement the \nTrue Jump Method\n without the need to use event detection schemes for the ODE integrator. These event detections can be quite unstable as explained in \npaper-2015\n and CHV provide a solution to this problem.\n\n\nrejection methods\n for which the user is asked to provide a bound on the reaction rates. These last methods are the most \"exact\" but not the fastest if the reaction rate bound is not tight. In case the flow is known analytically, a method is also provided.\n\n\n\n\nThese methods require solving stiff ODEs (for CHV ) in an efficient manner. \nSundials.jl\n and \nLSODA.jl\n are used, but other solvers could be easily added. (See \nstiff ode solvers\n).\n\n\nWe briefly recall facts about a simple class of PDMPs. They are described by a couple $(x_c,x_d)$ where $x_c$ is solution of the differential equation $\\frac{dx_c}{dt} = F(x_c,x_d,t)$. The second component $x_d$ is a jump process with rates $R(x_c,x_d,t)$. At each jump of $x_d$, a jump can also be added to the continuous variable $x_c$.\n\n\n\n\nInstallation\n\n\nTo install this (unregistered) package, run the command \n\n\nPkg.clone(\nhttps://github.com/sdwfrost/PDMP.jl.git\n)\n\n\n\n\n\n\nExamples\n\n\nSee the \nexamples directory\n.\n\n\nA simple example of a TCP process is given below:\n\n\nusing PDMP\n\nfunction F_tcp(xc, xd, t, parms)\n  # vector field used for the continuous variable\n  if mod(xd[1],2)==0\n    return vec([xc[1]])\n  else\n    return vec([-xc[1]])\n  end\nend\n\nfunction R_tcp(xc, xd, t, parms, sum_rate::Bool)\n  # rate function for each transition\n  # in this case,  the transitions are xd1-\nxd1+1 or xd2-\nxd2-1\n  # sum_rate is a boolean which tells R_tcp the type which must be returned:\n  # i.e. the sum of the rates or the vector of the rates\n  if sum_rate==false\n    return vec([5.0/(1.0 + exp(-xc[1]/1.0 + 5.0)) + 0.1, parms[1]])\n  else\n    return 5.0/(1.0 + exp(-xc[1]/1.0 + 5.0)) + 0.1 + parms[1]\n  end\nend\n\n# initial conditions for the continuous/discrete variables\nxc0 = vec([0.05])\nxd0 = vec([0, 1])\n\n# matrix of jumps for the discrete variables, analogous to chemical reactions\nconst nu_tcp = [[1 0];[0 -1]]\n\n# parameters  \nparms = [0.]\ntf = 2000.\n\ndummy =  PDMP.pdmp(2,xc0,xd0,F_tcp,R_tcp,nu_tcp,parms,0.0,tf,false)\nresult =  @time PDMP.pdmp(2000,xc0,xd0,F_tcp,R_tcp,nu_tcp,parms,0.0,tf,false)\n\n# plotting\nusing Plots\ngr()\nPlots.plot(result.time, result.xc[1,:],xlims=[0.,100.],title = string(\n#Jumps = \n,length(result.time)))\n\n\n\n\n#\n\n\nPDMP.rejection_exact\n \n \nFunction\n.\n\n\nrejection_exact\n\n\nThis function performs a simulation using the rejection method when the flow \nis known analytically\n. It takes the following arguments:\n\n\n\n\nn_max\n: an \nInt64\n representing the maximum number of jumps to be computed.\n\n\nxc0\n : a \nVector\n of \nFloat64\n, representing the initial states of the continuous variable.\n\n\nxd0\n : a \nVector\n of \nInt64\n, representing the initial states of the discrete variable.\n\n\nPhi!\n : a \nFunction\n or a callable type, which itself takes 6 arguments to represent the vector field; rate a \nVector\n of \nFloat64\n representing the \nflow\n of the vector which needs to be filled with values of the rates, xdot a \nVector\n of \nFloat64\n representing the vector field associated to the continuous variable, xc \nVector\n of \nFloat64\n representing the current state of the continuous variable, xd \nVector\n of \nInt64\n representing the current state of the discrete variable, t a \nFloat64\n representing the current time and parms, a \nVector\n of \nFloat64\n representing the parameters of the system, sum_of_rate a \nBool\n stating if the function must return the total rate.\n\n\nR!\n : a \nFunction\n or a callable type, which itself takes five arguments to represent the rate functions associated to the jumps;xc \nVector\n of \nFloat64\n representing the current state of the continuous variable, xd \nVector\n of \nInt64\n representing the current state of the discrete variable, t a \nFloat64\n representing the current time, parms a \nVector\n of \nFloat64\n representing the parameters of the system and sum_rate a \nBool\n being a flag asking to return a \nFloat64\n if true and a \nVector\n otherwise. The returned vector has components. If sum_rate is \nFalse\n, one must return rate_vector, bound_ where bound_ is a bound on the total rate vector. In the case sum_rate is \nTrue\n, one must return total_rate,bound_ where total_rate is a \nFloat64\n that is the sum of the rates. In any case, the function must return a couple (total_rates, bound) where bound is a bound for the total rate.\n\n\nDelta\n : a \nFunction\n or a callable type, which itself takes five arguments to apply the jump to the continuous variable;xc \nVector\n of \nFloat64\n representing the current state of the continuous variable, xd \nVector\n of \nInt64\n representing the current state of the discrete variable, t a \nFloat64\n representing the current time, parms a \nVector\n of \nFloat64\n representing the parameters of the system and ind_rec an \nInt64\n representing the index of the discrete jump.\n\n\nnu\n : a \nMatrix\n of \nInt64\n, representing the transitions of the system, organised by row.\n\n\nparms\n : a \nVector\n of \nFloat64\n representing the parameters of the system.\n\n\ntf\n : the final simulation time (\nFloat64\n)\n\n\nverbose\n : a \nBool\n for printing verbose.\n\n\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#pdmpjl", 
            "text": "PDMP.jl is a Julia package that allows simulation of  Piecewise Deterministic Markov Processes  (PDMP); these encompass hybrid systems and jump processes, comprised of continuous and discrete components, as well as processes with time-varying rates. The aim of the package is to provide methods for the simulation of these processes that are \"exact\" up to the ODE integrator.  We provide several methods for the simulation:   a recent trick, called  CHV , explained in  paper-2015  which allows to implement the  True Jump Method  without the need to use event detection schemes for the ODE integrator. These event detections can be quite unstable as explained in  paper-2015  and CHV provide a solution to this problem.  rejection methods  for which the user is asked to provide a bound on the reaction rates. These last methods are the most \"exact\" but not the fastest if the reaction rate bound is not tight. In case the flow is known analytically, a method is also provided.   These methods require solving stiff ODEs (for CHV ) in an efficient manner.  Sundials.jl  and  LSODA.jl  are used, but other solvers could be easily added. (See  stiff ode solvers ).  We briefly recall facts about a simple class of PDMPs. They are described by a couple $(x_c,x_d)$ where $x_c$ is solution of the differential equation $\\frac{dx_c}{dt} = F(x_c,x_d,t)$. The second component $x_d$ is a jump process with rates $R(x_c,x_d,t)$. At each jump of $x_d$, a jump can also be added to the continuous variable $x_c$.", 
            "title": "PDMP.jl"
        }, 
        {
            "location": "/#installation", 
            "text": "To install this (unregistered) package, run the command   Pkg.clone( https://github.com/sdwfrost/PDMP.jl.git )", 
            "title": "Installation"
        }, 
        {
            "location": "/#examples", 
            "text": "See the  examples directory .  A simple example of a TCP process is given below:  using PDMP\n\nfunction F_tcp(xc, xd, t, parms)\n  # vector field used for the continuous variable\n  if mod(xd[1],2)==0\n    return vec([xc[1]])\n  else\n    return vec([-xc[1]])\n  end\nend\n\nfunction R_tcp(xc, xd, t, parms, sum_rate::Bool)\n  # rate function for each transition\n  # in this case,  the transitions are xd1- xd1+1 or xd2- xd2-1\n  # sum_rate is a boolean which tells R_tcp the type which must be returned:\n  # i.e. the sum of the rates or the vector of the rates\n  if sum_rate==false\n    return vec([5.0/(1.0 + exp(-xc[1]/1.0 + 5.0)) + 0.1, parms[1]])\n  else\n    return 5.0/(1.0 + exp(-xc[1]/1.0 + 5.0)) + 0.1 + parms[1]\n  end\nend\n\n# initial conditions for the continuous/discrete variables\nxc0 = vec([0.05])\nxd0 = vec([0, 1])\n\n# matrix of jumps for the discrete variables, analogous to chemical reactions\nconst nu_tcp = [[1 0];[0 -1]]\n\n# parameters  \nparms = [0.]\ntf = 2000.\n\ndummy =  PDMP.pdmp(2,xc0,xd0,F_tcp,R_tcp,nu_tcp,parms,0.0,tf,false)\nresult =  @time PDMP.pdmp(2000,xc0,xd0,F_tcp,R_tcp,nu_tcp,parms,0.0,tf,false)\n\n# plotting\nusing Plots\ngr()\nPlots.plot(result.time, result.xc[1,:],xlims=[0.,100.],title = string( #Jumps =  ,length(result.time)))  #  PDMP.rejection_exact     Function .  rejection_exact  This function performs a simulation using the rejection method when the flow  is known analytically . It takes the following arguments:   n_max : an  Int64  representing the maximum number of jumps to be computed.  xc0  : a  Vector  of  Float64 , representing the initial states of the continuous variable.  xd0  : a  Vector  of  Int64 , representing the initial states of the discrete variable.  Phi!  : a  Function  or a callable type, which itself takes 6 arguments to represent the vector field; rate a  Vector  of  Float64  representing the  flow  of the vector which needs to be filled with values of the rates, xdot a  Vector  of  Float64  representing the vector field associated to the continuous variable, xc  Vector  of  Float64  representing the current state of the continuous variable, xd  Vector  of  Int64  representing the current state of the discrete variable, t a  Float64  representing the current time and parms, a  Vector  of  Float64  representing the parameters of the system, sum_of_rate a  Bool  stating if the function must return the total rate.  R!  : a  Function  or a callable type, which itself takes five arguments to represent the rate functions associated to the jumps;xc  Vector  of  Float64  representing the current state of the continuous variable, xd  Vector  of  Int64  representing the current state of the discrete variable, t a  Float64  representing the current time, parms a  Vector  of  Float64  representing the parameters of the system and sum_rate a  Bool  being a flag asking to return a  Float64  if true and a  Vector  otherwise. The returned vector has components. If sum_rate is  False , one must return rate_vector, bound_ where bound_ is a bound on the total rate vector. In the case sum_rate is  True , one must return total_rate,bound_ where total_rate is a  Float64  that is the sum of the rates. In any case, the function must return a couple (total_rates, bound) where bound is a bound for the total rate.  Delta  : a  Function  or a callable type, which itself takes five arguments to apply the jump to the continuous variable;xc  Vector  of  Float64  representing the current state of the continuous variable, xd  Vector  of  Int64  representing the current state of the discrete variable, t a  Float64  representing the current time, parms a  Vector  of  Float64  representing the parameters of the system and ind_rec an  Int64  representing the index of the discrete jump.  nu  : a  Matrix  of  Int64 , representing the transitions of the system, organised by row.  parms  : a  Vector  of  Float64  representing the parameters of the system.  tf  : the final simulation time ( Float64 )  verbose  : a  Bool  for printing verbose.   source", 
            "title": "Examples"
        }
    ]
}